rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents/{environment}/{envDoc} {
  
  	// USERS COLLECTION:
  	match /users/{userId} {
    	allow read, write: if isOwner(userId);
      
      // If I ever decide to have public user document
      // it would fall under this path
      match /public-data/{publicDoc} {
      	allow read: if true;
        allow write: if isOwner(userId);
      }
    }
    
    // CHECK-IN COLLECTION:
    match /check-in/{docID} {
    	allow read: if isOwner(existingData().userId);
      allow create: if isOwner(incomingData().userId);
      allow update: if isOwner(existingData().userId) && isOwner(incomingData().userId);
    }
    
    // BRANDS COLLECTION:
    match /check-in/{docID} {
    	allow read: if true;
    }
    
    /// Helper Functions ///
    function isOwner(userId) {
    	return request.auth.uid == userId;
    }
    
    function existingData() {
    	return resource.data
    }
    
    function incomingData() {
    	return request.resource.data
    }

    // This rule allows anyone with your database reference to view, edit,
    // and delete all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // all client requests to your Firestore database will be denied until you Update
    // your rules
    match /{document=**} {
      allow read, write: if request.time < timestamp.date(2020, 9, 1);
    }
  }
}